// src/hooks/useInventory.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { inventoryService } from '../services/inventoryService';
import { StockMovementData } from '../types/inventory';
import { toast } from 'sonner';

export const useCurrentStocks = () => {
  return useQuery({
    queryKey: ['current-stocks'],
    queryFn: () => inventoryService.getAllCurrentStocks(),
  });
};

export const useCurrentStock = (productId: number) => {
  return useQuery({
    queryKey: ['current-stock', productId],
    queryFn: () => inventoryService.getCurrentStock(productId),
    enabled: !!productId,
  });
};

export const useInventoryTransactions = (productId?: number, page = 0, size = 20) => {
  return useQuery({
    queryKey: ['inventory-transactions', productId, page, size],
    queryFn: () => inventoryService.getTransactions(productId, page, size),
    enabled: true,
  });
};

export const useAddStock = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (data: StockMovementData) => inventoryService.addStock(data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['current-stocks'] });
      queryClient.invalidateQueries({ queryKey: ['current-stock', data.product.id] });
      queryClient.invalidateQueries({ queryKey: ['inventory-transactions'] });
      queryClient.invalidateQueries({ queryKey: ['low-stock-alerts'] });
      toast.success('Stock added successfully');
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || 'Failed to add stock');
    },
  });
};

export const useRemoveStock = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (data: StockMovementData) => inventoryService.removeStock(data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['current-stocks'] });
      queryClient.invalidateQueries({ queryKey: ['current-stock', data.product.id] });
      queryClient.invalidateQueries({ queryKey: ['inventory-transactions'] });
      queryClient.invalidateQueries({ queryKey: ['low-stock-alerts'] });
      toast.success('Stock removed successfully');
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || 'Failed to remove stock');
    },
  });
};

export const useLowStockAlerts = () => {
  return useQuery({
    queryKey: ['low-stock-alerts'],
    queryFn: () => inventoryService.getLowStockAlerts(),
    refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes
  });
};